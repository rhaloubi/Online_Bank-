@page "/dashboard"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject OnlineBank_FE.Services.AuthService AuthService
@inject OnlineBank_FE.Services.ClientService ClientService
@inject OnlineBank_FE.Services.AccountService AccountService
@inject OnlineBank_FE.Services.TransactionService TransactionService

@using OnlineBank_FE.Models

<div class="flex bg-gray-900">
    <!-- Sidebar -->
    <Sidebar />


    <!-- Main Content -->
    <main class="flex-1 p-4 px-16 ml-64">

        <header class="flex justify-between items-center bg-gray-900 relative inline-block text-left mb-6 relative text-white">
            <button class="bg-purple-600 px-6 py-3 rounded-full ml-auto flex items-center" @onclick="ToggleDropdown">
                <span>Move Money</span>
                <svg class="w-4 h-4 ml-2 transform transition-transform duration-200 @(isDropdownOpen ? "rotate-180" : "")" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 9l6 6 6-6" />
                </svg>
            </button>
            @if (isDropdownOpen)
            {
                <div class="absolute right-0 z-10 mt-[230px] w-52 bg-gray-900 border border-gray-700 rounded-md shadow-lg">
                    <div class="py-1" role="menu" aria-orientation="vertical">
                        <a href="#" class="flex flex-col mx-2 px-2 my-1 py-1 rounded-md text-gray-100 hover:bg-gray-600" role="menuitem">Send</a>
                        <a href="#" class="flex flex-col mx-2 px-2 my-1 py-1 rounded-md text-gray-100 hover:bg-gray-600" role="menuitem">Receive</a>
                        <a href="#" class="flex flex-col mx-2 px-2 my-1 py-1 rounded-md text-gray-100 hover:bg-gray-600" role="menuitem">Cards</a>
                        <a href="#" class="flex flex-col mx-2 px-2 my-1 py-1 rounded-md text-gray-100 hover:bg-gray-600" role="menuitem">Accounts</a>
                    </div>
                </div>
            }
        </header>

        <div class="grid grid-cols-5 gap-6">
            <!-- Account Info Card -->
            <div class="bg-gray-950 p-9 rounded-lg border border-slate-800	 col-span-2">
                <h3 class="text-xl text-gray-500 pb-[40px]"><span>@client.Name</span>'s ACCOUNT</h3>
                <h2 class="text-[60px] pb-[32px]">Welcome back, @client.Name ! 👋</h2>
                <p class="text-[18px] mt-2 text-gray-500 pb-[40px]">Everything seems ok and up-to-date with your account since your last visit. Would you like to fund it?</p>
                <button class="bg-purple-600 hover:bg-purple-700 px-11 py-3 rounded-full items-center mt-auto">
                    <span class="text-[18px]">Fund my Account</span>
                </button>
            </div>

            <!-- Chart Card -->
            <div class="bg-gray-950 p-4 rounded-lg border border-slate-800	col-span-3">
                <h2 class="text-xl text-center pt-3 text-gray-500">Account Balance</h2>
                <p class="text-4xl mt-2 text-center">$ @account.Balance.ToString("F2") </p>
                @if (lastdaytrs > 0)
                {
                    <p class="text-sm text-green-500 text-center">+$ @lastdaytrs.ToString("F2") Today, @DateTime.Now.ToString("dd MMM", new System.Globalization.CultureInfo("fr-FR"))</p>
                }
                else if (lastdaytrs < 0)
                {
            <p class="text-sm text-red-500 text-center">-$ @lastdaytrs.ToString("F2") Today, @DateTime.Now.ToString("dd MMM", new System.Globalization.CultureInfo("fr-FR"))</p>
                }
                else
                {
            <p class="text-sm text-gray-500 text-center">$0.00 Today, @DateTime.Now.ToString("dd MMM", new System.Globalization.CultureInfo("fr-FR"))</p>
                }

                <canvas id="balanceChart" class="mt-4"></canvas>
            </div>
        </div>

        <div class="grid grid-cols-2 gap-6 mt-6">
            <!-- Money Out Last 30 Days -->
            <div class="px-[45px] py-[55px] border border-slate-800 rounded-lg">
                <h3 class="text-[30px] text-gray-500">MONEY OUT LAST 30 DAYS</h3>
                <p class="text-[40px] mt-6 mb-6">$ @Outlast30DaysTotal.ToString("F2")</p>
                <p class="text-md text-gray-600 pb-1 border-b-[2px] mb-8 border-gray-600">
                    @if (Outlast30DaysTotal > 0)
                    {
                        <span>Here's the total for the last 30 days.</span>
                    }
                    else
                    {
                        <span>No incoming transactions yet.</span>
                    }
                </p>
                <div class="flex justify-end">
                    <button class="flex group inline-flex items-center gap-3 text-purple-600 hover:text-purple-400 transition-colors duration-300">
                        <span class="hover:translate-x text-[20px] transition-transform duration-200">View All</span>
                        <svg class="iconify w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14m-7-7l7 7-7 7" />
                        </svg>
                    </button>
                </div>
            </div>



            <!-- Money In Last 30 Days -->
            <div class=" px-[45px] py-[55px] border border-slate-800	 rounded-lg">
                <h3 class="text-[30px] text-gray-500">MONEY IN LAST 30 DAYS</h3>
                <p class="text-[40px] mt-6 mb-6">$ @Inlast30DaysTotal.ToString("F2")</p>
                <p class="text-md text-gray-600 pb-1 border-b-[2px] mb-8 border-gray-600">No incoming transactions yet</p>
                <div class="flex justify-end">
                    <button class="flex group inline-flex items-center gap-3 text-purple-600 hover:text-purple-400 transition-colors duration-300">
                        <span class="hover:translate-x text-[20px] transition-transform duration-200">View All</span>
                        <svg class="iconify w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14m-7-7l7 7-7 7" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>

    </main>
</div>
@code {
    private bool isDropdownOpen = false;

    // These lists will be populated dynamically for the last 6 days
    private List<string> labels = new List<string>(); // Day and month (e.g., "20 Sep")
    private List<decimal> data = new List<decimal>(); // Now it stores decimal values

    private bool isLoading = true;
    private Client? client;
    private Account? account;
    private List<Transaction>? transactionOut;
    private List<Transaction>? transactionIn;
    private string? errorMessage;
    private decimal Outlast30DaysTotal = 0;
    private decimal Inlast30DaysTotal = 0;
    private decimal lastdaytrs = 0;

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the chart once the component is rendered
            await InitializeChart();
        }
    }

    private async Task InitializeChart()
    {
        try
        {
            // Initialize the bar chart using JavaScript interop
            await JSRuntime.InvokeVoidAsync("initializeBarChart", "balanceChart", labels, data);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing chart: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true; // Set loading state to true at the start

        try
        {
            // Ensure the user is logged in
            if (!await AuthService.IsLoggedInAsync())
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Initialize token if not already set
            await AuthService.InitializeAuth();

            // Fetch client details, account balance, and transactions
            client = await ClientService.GetClientDetailsAsync();
            account = await AccountService.GetBalanceAsync();
            transactionOut = await TransactionService.GetTransactionsOutAsync() ?? new List<Transaction>();
            transactionIn = await TransactionService.GetTransactionsInAsync() ?? new List<Transaction>();

            // Handle failure to load essential data
            if (client == null || account == null || transactionOut == null || transactionIn == null)
            {
                errorMessage = "Failed to load client or account details.";
                return;
            }

            // Calculate total transaction amounts for the last 30 days for both outgoing and incoming transactions
            Outlast30DaysTotal = GetTotalTransactionAmount(transactionOut);
            Inlast30DaysTotal = GetTotalTransactionAmount(transactionIn);
            decimal lastdaytrsIn = Getlastday(transactionIn);
            decimal lastdaytrsOut = Getlastday(transactionOut);

            lastdaytrs = lastdaytrsIn - lastdaytrsOut;
            // Fetch transaction data for the last 6 days
            GetTransactionDataForLast6Days();
        }
        catch (Exception ex)
        {
            // Log any exceptions and display an error message
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false; // Set loading state to false once the operation is complete
        }
    }

    private decimal GetTotalTransactionAmount(List<Transaction> transactions)
    {
        return transactions.Sum(t => t.Amount);
    }

    private decimal Getlastday(List<Transaction> transactions)
    {
        // Return net sum for today (last 24 hours)
        DateTime today = DateTime.UtcNow.Date;
        return transactions
            .Where(t => t.Date.Date == today)
            .Sum(t => t.Amount);
    }

    private void GetTransactionDataForLast6Days()
    {
        // Collect the last 6 days and their transaction sums
        labels.Clear();
        data.Clear();

        for (int i = 5; i >= 0; i--)
        {
            DateTime day = DateTime.UtcNow.AddDays(-i);
            string label = day.ToString("dd MMM");
            labels.Add(label);

            decimal dayTotalOut = GetTransactionTotalForDate(transactionOut, day);
            decimal dayTotalIn = GetTransactionTotalForDate(transactionIn, day);

            // Net difference for the day
            data.Add(dayTotalIn - dayTotalOut);
        }
    }

    private decimal GetTransactionTotalForDate(List<Transaction> transactions, DateTime date)
    {
        return transactions
            .Where(t => t.Date.Date == date.Date)
            .Sum(t => t.Amount);
    }
}
